//
// Mixins
// --------------------------------------------------


// UTILITY MIXINS
// --------------------------------------------------

// Clearfix
// --------
// For clearing floats like a boss h5bp.com/q
.clearfix {
	*zoom: 1;
	&:before,
	&:after {
		display: table;
		content: "";
		// Fixes Opera/contenteditable bug:
		// http://nicolasgallagher.com/micro-clearfix-hack/#comment-36952
		line-height: 0;
	}
	&:after {
		clear: both;
	}
}

// Webkit-style focus
// ------------------
.tab-focus() {
	// Default
	outline: thin dotted @black;
	// Webkit
	outline: 5px auto -webkit-focus-ring-color;
	outline-offset: -2px;
}

// Center-align a block level element
// ----------------------------------
.center-block() {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// IE7 inline-block
// ----------------
.ie7-inline-block() {
	*display: inline; /* IE7 inline-block hack */
	*zoom: 1;
}

// IE7 likes to collapse whitespace on either side of the inline-block elements.
// Ems because we're attempting to match the width of a space character. Left
// version is for form buttons, which typically come after other elements, and
// right version is for icons, which come before. Applying both is ok, but it will
// mean that space between those elements will be .6em (~2 space characters) in IE7,
// instead of the 1 space in other browsers.
.ie7-restore-left-whitespace() {
	*margin-left: .3em;
	&:first-child {
		*margin-left: 0;
	}
}

.ie7-restore-right-whitespace() {
	*margin-right: .3em;
}

// Sizing shortcuts
// -------------------------
.size(@height, @width) {
	width: @width;
	height: @height;
}
.square(@size) {
	.size(@size, @size);
}

// Placeholder text
// -------------------------
.placeholder() {
	&:-moz-placeholder {
		color: @placeholderText;
	}
	&:-ms-input-placeholder {
		color: @placeholderText;
	}
	&::-webkit-input-placeholder {
		color: @placeholderText;
	}
}

// Selection Text
// -------------------------
.selection() {
	&::selection {
		background: @selectionBackground;
		color: @selectionText;
	}
	&::-moz-selection {
		background: @selectionBackground;
		color: @selectionText;
	}
	&::-webkit-selection {
		background: @selectionBackground;
		color: @selectionText;
	}
}

// Text overflow
// -------------------------
// Requires inline-block or block for proper styling
.text-overflow() {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

// CSS image replacement
// -------------------------
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757
.hide-text {
	font: 0/0 a;
	color: transparent;
	text-shadow: none;
	background-color: transparent;
	border: 0;
}


// FONTS
// --------------------------------------------------

#font {
	#family {
		.serif() {
			font-family: @serifFontFamily;
		}
		.sans-serif() {
			font-family: @sansFontFamily;
		}
		.monospace() {
			font-family: @monoFontFamily;
		}
	}
	.shorthand(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight) {
		font-size: @size;
		font-weight: @weight;
		line-height: @lineHeight;
	}
	.serif(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight) {
		#font > #family > .serif;
		#font > .shorthand(@size, @weight, @lineHeight);
	}
	.sans-serif(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight) {
		#font > #family > .sans-serif;
		#font > .shorthand(@size, @weight, @lineHeight);
	}
	.monospace(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight) {
		#font > #family > .monospace;
		#font > .shorthand(@size, @weight, @lineHeight);
	}
}


// FORMS
// --------------------------------------------------

// Block level inputs
.input-block-level {
	display: block;
	width: 100%;
	min-height: @inputHeight + 18; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
	.box-sizing(border-box); // Makes inputs behave like true block-level elements
}


// CSS3 PROPERTIES
// --------------------------------------------------

// Border Radius
.border-radius(@radius) {
	-webkit-border-radius: @radius;
		-moz-border-radius: @radius;
			border-radius: @radius;
}

// Single Corner Border Radius
.border-top-left-radius(@radius) {
	-webkit-border-top-left-radius: @radius;
		-moz-border-radius-topleft: @radius;
			border-top-left-radius: @radius;
}
.border-top-right-radius(@radius) {
	-webkit-border-top-right-radius: @radius;
		-moz-border-radius-topright: @radius;
		border-top-right-radius: @radius;
}
.border-bottom-right-radius(@radius) {
	-webkit-border-bottom-right-radius: @radius;
		-moz-border-radius-bottomright: @radius;
			border-bottom-right-radius: @radius;
}
.border-bottom-left-radius(@radius) {
	-webkit-border-bottom-left-radius: @radius;
		-moz-border-radius-bottomleft: @radius;
			border-bottom-left-radius: @radius;
}

// Single Side Border Radius
.border-top-radius(@radius) {
	.border-top-right-radius(@radius);
	.border-top-left-radius(@radius);
}
.border-right-radius(@radius) {
	.border-top-right-radius(@radius);
	.border-bottom-right-radius(@radius);
}
.border-bottom-radius(@radius) {
	.border-bottom-right-radius(@radius);
	.border-bottom-left-radius(@radius);
}
.border-left-radius(@radius) {
	.border-top-left-radius(@radius);
	.border-bottom-left-radius(@radius);
}

// Drop shadows
.box-shadow(@shadow) {
	-webkit-box-shadow: @shadow;
		-moz-box-shadow: @shadow;
			box-shadow: @shadow;
}

// Transitions
.transition(@transition) {
	-webkit-transition: @transition;
		-moz-transition: @transition;
		-o-transition: @transition;
			transition: @transition;
}
.transition-delay(@transition-delay) {
	-webkit-transition-delay: @transition-delay;
		-moz-transition-delay: @transition-delay;
		-o-transition-delay: @transition-delay;
			transition-delay: @transition-delay;
}
.transition-duration(@transition-duration) {
	-webkit-transition-duration: @transition-duration;
		-moz-transition-duration: @transition-duration;
		-o-transition-duration: @transition-duration;
			transition-duration: @transition-duration;
}

// Transformations
.rotate(@degrees) {
	-webkit-transform: rotate(@degrees);
		-moz-transform: rotate(@degrees);
		-ms-transform: rotate(@degrees);
		-o-transform: rotate(@degrees);
			transform: rotate(@degrees);
}
.scale(@ratio) {
	-webkit-transform: scale(@ratio);
		-moz-transform: scale(@ratio);
		-ms-transform: scale(@ratio);
		-o-transform: scale(@ratio);
			transform: scale(@ratio);
}
.translate(@x, @y) {
	-webkit-transform: translate(@x, @y);
		-moz-transform: translate(@x, @y);
		-ms-transform: translate(@x, @y);
		-o-transform: translate(@x, @y);
			transform: translate(@x, @y);
}
.skew(@x, @y) {
	-webkit-transform: skew(@x, @y);
		-moz-transform: skew(@x, @y);
		-ms-transform: skewX(@x) skewY(@y); // See https://github.com/twitter/bootstrap/issues/4885
		-o-transform: skew(@x, @y);
			transform: skew(@x, @y);
	-webkit-backface-visibility: hidden; // See https://github.com/twitter/bootstrap/issues/5319
}
.translate3d(@x, @y, @z) {
	-webkit-transform: translate3d(@x, @y, @z);
		-moz-transform: translate3d(@x, @y, @z);
		-o-transform: translate3d(@x, @y, @z);
			transform: translate3d(@x, @y, @z);
}

// Backface visibility
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden
// See git pull https://github.com/dannykeane/bootstrap.git backface-visibility for examples
.backface-visibility(@visibility){
	-webkit-backface-visibility: @visibility;
		-moz-backface-visibility: @visibility;
			backface-visibility: @visibility;
}

// Background clipping
// Heads up: FF 3.6 and under need "padding" instead of "padding-box"
.background-clip(@clip) {
	-webkit-background-clip: @clip;
		-moz-background-clip: @clip;
			background-clip: @clip;
}

// Background sizing
.background-size(@size) {
	-webkit-background-size: @size;
		-moz-background-size: @size;
		-o-background-size: @size;
			background-size: @size;
}


// Box sizing
.box-sizing(@boxmodel) {
	-webkit-box-sizing: @boxmodel;
		-moz-box-sizing: @boxmodel;
			box-sizing: @boxmodel;
}

// User select
// For selecting text on the page
.user-select(@select) {
	-webkit-user-select: @select;
		-moz-user-select: @select;
		-ms-user-select: @select;
		-o-user-select: @select;
			user-select: @select;
}

// Resize anything
.resizable(@direction) {
	resize: @direction; // Options: horizontal, vertical, both
	overflow: auto; // Safari fix
}

// CSS3 Content Columns
.content-columns(@columnCount, @columnGap: @gridGutterWidth) {
	-webkit-column-count: @columnCount;
		-moz-column-count: @columnCount;
			column-count: @columnCount;
	-webkit-column-gap: @columnGap;
		-moz-column-gap: @columnGap;
			column-gap: @columnGap;
}

// Optional hyphenation
.hyphens(@mode: auto) {
	word-wrap: break-word;
	-webkit-hyphens: @mode;
		-moz-hyphens: @mode;
		-ms-hyphens: @mode;
		-o-hyphens: @mode;
			hyphens: @mode;
}

// Opacity
.opacity(@opacity) {
	opacity: @opacity / 100;
	filter: ~"alpha(opacity=@{opacity})";
}

// HR border color gradient
.hrBorder() {
	background: -moz-linear-gradient(left, @hrBorderOut 0%, @hrBorderIn 50%, @hrBorderOut 100%);
	background: -webkit-gradient(linear, left top, right top, color-stop(0%, @hrBorderOut), color-stop(50%, @hrBorderIn), color-stop(100%, @hrBorderOut));
	background: -webkit-linear-gradient(left, @hrBorderOut 0%, @hrBorderIn 50%, @hrBorderOut 100%);
	background: -o-linear-gradient(left, @hrBorderOut 0%, @hrBorderIn 50%, @hrBorderOut 100%);
	background: -ms-linear-gradient(left, @hrBorderOut 0%, @hrBorderIn 50%, @hrBorderOut 100%);
	background: linear-gradient(to right, @hrBorderOut 0%, @hrBorderIn 50%, @hrBorderOut 100%);
}


// BACKGROUNDS
// --------------------------------------------------

// Add an alphatransparency value to any background or border color (via Elyse Holladay)
#translucent {
	.background(@color: @white, @alpha: 1) {
		background-color: hsla(hue(@color), saturation(@color), lightness(@color), @alpha);
	}
	.border(@color: @white, @alpha: 1) {
		border-color: hsla(hue(@color), saturation(@color), lightness(@color), @alpha);
		.background-clip(padding-box);
	}
}

// Gradients
#gradient {
	.horizontal(@startColor: @defaultColorGradientStart, @endColor: @defaultColorGradientEnd) {
		background-color: @endColor;
		background-image: -moz-linear-gradient(left, @startColor, @endColor); // FF 3.6+
		background-image: -webkit-gradient(linear, 0 0, 100% 0, from(@startColor), to(@endColor)); // Safari 4+, Chrome 2+
		background-image: -webkit-linear-gradient(left, @startColor, @endColor); // Safari 5.1+, Chrome 10+
		background-image: -o-linear-gradient(left, @startColor, @endColor); // Opera 11.10
		background-image: linear-gradient(to right, @startColor, @endColor); // Standard, IE10
		background-repeat: repeat-x;
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@startColor),argb(@endColor))); // IE9 and down
	}
	.vertical(@startColor: @defaultColorGradientStart, @endColor: @defaultColorGradientEnd) {
		background-color: mix(@startColor, @endColor, 60%);
		background-image: -moz-linear-gradient(top, @startColor, @endColor); // FF 3.6+
		background-image: -webkit-gradient(linear, 0 0, 0 100%, from(@startColor), to(@endColor)); // Safari 4+, Chrome 2+
		background-image: -webkit-linear-gradient(top, @startColor, @endColor); // Safari 5.1+, Chrome 10+
		background-image: -o-linear-gradient(top, @startColor, @endColor); // Opera 11.10
		background-image: linear-gradient(to bottom, @startColor, @endColor); // Standard, IE10
		background-repeat: repeat-x;
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@startColor),argb(@endColor))); // IE9 and down
	}
}
// Reset filters for IE
.reset-filter() {
	filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
}


// Navbar vertical align
// -------------------------
// Vertically center elements in the navbar.
// Example: an element has a height of 30px, so write out `.navbarVerticalAlign(30px);` to calculate the appropriate top margin.
.navbarVerticalAlign(@elementHeight) {
	margin-top: (@navbarHeight - @elementHeight) / 2;
}


// Grid System
// -----------

// Centered container element
.container-fixed() {
  margin-right: auto;
  margin-left: auto;
  .clearfix();
}

// Table columns
.tableColumns(@columnSpan: 1) {
  float: none; // undo default grid column styles
  width: ((@gridColumnWidth) * @columnSpan) + (@gridGutterWidth * (@columnSpan - 1)) - 16; // 16 is total padding on left and right of table cells
  margin-left: 0; // undo default grid column styles
}

// Make a Grid
// Use .makeRow and .makeColumn to assign semantic layouts grid system behavior
.makeRow() {
  margin-left: @gridGutterWidth * -1;
  .clearfix();
}
.makeColumn(@columns: 1, @offset: 0) {
  float: left;
  margin-left: (@gridColumnWidth * @offset) + (@gridGutterWidth * (@offset - 1)) + (@gridGutterWidth * 2);
  width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
}

// The Grid
#grid {

	.core (@gridColumnWidth, @gridGutterWidth) {

	.spanX (@index) when (@index > 0) {
		.span@{index} { .span(@index); }
		.spanX(@index - 1);
	}
	.spanX (0) {}

	.offsetX (@index) when (@index > 0) {
		.offset@{index} { .offset(@index); }
		.offsetX(@index - 1);
	}
	.offsetX (0) {}

	.offset (@columns) {
		margin-left: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns + 1));
	}

	.span (@columns) {
		width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
	}

	.row {
		margin-left: @gridGutterWidth * -1;
		.clearfix();
	}

	[class*="span"] {
		float: left;
		min-height: 1px; // prevent collapsing columns
		margin-left: @gridGutterWidth;
	}

	// Set the container width, and override it for fixed navbars in media queries
	.container,
	.navbar-static-top .container,
	.navbar-fixed-top .container,
	.navbar-fixed-bottom .container { .span(@gridColumns); }

	// generate .spanX and .offsetX
	.spanX (@gridColumns);
	.offsetX (@gridColumns);

	}

	.fluid (@fluidGridColumnWidth, @fluidGridGutterWidth) {

	.spanX (@index) when (@index > 0) {
		.span@{index} { .span(@index); }
		.spanX(@index - 1);
	}
	.spanX (0) {}

	.offsetX (@index) when (@index > 0) {
		.offset@{index} { .offset(@index); }
		.offset@{index}:first-child { .offsetFirstChild(@index); }
		.offsetX(@index - 1);
	}
	.offsetX (0) {}

	.offset (@columns) {
		margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) + (@fluidGridGutterWidth*2);
		*margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%) + (@fluidGridGutterWidth*2) - (.5 / @gridRowWidth * 100 * 1%);
	}

	.offsetFirstChild (@columns) {
		margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) + (@fluidGridGutterWidth);
		*margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%) + @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
	}

	.span (@columns) {
		width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1));
		*width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%);
	}

	.row-fluid {
		width: 100%;
		.clearfix();
		[class*="span"] {
			.input-block-level();
			float: left;
			margin-left: @fluidGridGutterWidth;
			*margin-left: @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
		}
		[class*="span"]:first-child {
			margin-left: 0;
		}

		// Space grid-sized controls properly if multiple per line
		.controls-row [class*="span"] + [class*="span"] {
			margin-left: @fluidGridGutterWidth;
		}

		// generate .spanX and .offsetX
		.spanX (@gridColumns);
		.offsetX (@gridColumns);
		}

	}

	.input(@gridColumnWidth, @gridGutterWidth) {

		.spanX (@index) when (@index > 0) {
			input.span@{index},
			textarea.span@{index},
			.uneditable-input.span@{index} {
				.span(@index);
			}
			.spanX(@index - 1);
		}
		.spanX (0) {}

		.span(@columns) {
			width: ((@gridColumnWidth) * @columns) + (@gridGutterWidth * (@columns - 1)) - 14;
		}

		input,
		textarea,
		.uneditable-input {
			margin-left: 0; // override margin-left from core grid system
		}

		// Space grid-sized controls properly if multiple per line
		.controls-row [class*="span"] + [class*="span"] {
			margin-left: @gridGutterWidth;
		}

		// generate .spanX
		.spanX (@gridColumns);

	}
}